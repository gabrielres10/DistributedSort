//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Sorting.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Sorting;

public interface WorkersHandler extends com.zeroc.Ice.Object
{
    void registerWorker(SorterPrx proxy, com.zeroc.Ice.Current current);

    void unregisterWorker(SorterPrx proxy, com.zeroc.Ice.Current current);

    java.util.List<String> disSort(java.util.List<String> inputSequence, com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::Sorting::WorkersHandler"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::Sorting::WorkersHandler";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_registerWorker(WorkersHandler obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        SorterPrx iceP_proxy;
        iceP_proxy = SorterPrx.uncheckedCast(istr.readProxy());
        inS.endReadParams();
        obj.registerWorker(iceP_proxy, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_unregisterWorker(WorkersHandler obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        SorterPrx iceP_proxy;
        iceP_proxy = SorterPrx.uncheckedCast(istr.readProxy());
        inS.endReadParams();
        obj.unregisterWorker(iceP_proxy, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_disSort(WorkersHandler obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.List<String> iceP_inputSequence;
        iceP_inputSequence = new java.util.ArrayList<String>();
        final int len0 = istr.readAndCheckSeqSize(1);
        for(int i0 = 0; i0 < len0; i0++)
        {
            String elem;
            elem = istr.readString();
            iceP_inputSequence.add(elem);
        }
        inS.endReadParams();
        java.util.List<String> ret = obj.disSort(iceP_inputSequence, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        if(ret == null)
        {
            ostr.writeSize(0);
        }
        else
        {
            ostr.writeSize(ret.size());
            for(String elem : ret)
            {
                ostr.writeString(elem);
            }
        }
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "disSort",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "registerWorker",
        "unregisterWorker"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_disSort(this, in, current);
            }
            case 1:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 2:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 3:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 4:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 5:
            {
                return _iceD_registerWorker(this, in, current);
            }
            case 6:
            {
                return _iceD_unregisterWorker(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
